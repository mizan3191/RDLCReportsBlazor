@page "/employees"

@using BlazorAppForReporting.Services
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using System.Collections.Generic

@rendermode InteractiveServer

<h3>Employees</h3>

@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Employee ID</th>
                <th>Name</th>
                <th>Position</th>
                <th>Department</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employees)
            {
                <tr>
                    <td>@employee.Id</td>
                    <td>@employee.Name</td>
                    <td>@employee.Designation</td>
                    <td>@employee.Phone</td>
                    <td>
                        <button class="btn btn-warning" target="_blank" @onclick="() => PrintEmployee(employee.Id)">Print</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Employee> employees;

    [Inject]
    private HttpClient Http { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        try
        {
            employees = await Http.GetFromJsonAsync<List<Employee>>("Employees/EmployeeList");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task PrintEmployee(string employeeId)
    {
        try
        {
            Employee employee = employees.FirstOrDefault(x => x.Id == employeeId);
            await Http.PostAsJsonAsync("Employees/EmployeePrintDetails", employee);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
